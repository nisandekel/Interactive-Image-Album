{"version":3,"sources":["components/Banner.js","components/UploadPhoto.js","components/ImagesList.js","components/SearchPhotos.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Banner","msgRef","React","createRef","this","current","classList","remove","setTimeout","document","querySelector","add","react_default","a","createElement","className","ref","props","msg","Component","UploadPhoto","state","photoBase64","hashtags","bannerMsg","textInputRef","imgInputRef","changeHashtagsInputValue","event","target","value","_this","setState","convertImgToBase64","file","img","files","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","then","data","checkValidation","charAt","uploadPhotoToServer","path","fetch","baseUrl","method","headers","Content-Type","body","JSON","stringify","res","catch","err","console","log","id","Form","Control","onChange","type","placeholder","Button","onClick","variant","src_components_Banner","ImagesList","list","map","index","Col","key","Card","Body","Img","src","Text","join","length","DidFirstMount","push","Container","Row","SearchPhotos","imgList","filterCards","split","route","json","_this2","imgNumToDisplay","components_ImagesList","Header","title","App","components_Header","react_router_dom","bg","to","react_router","exact","component","src_components_SearchPhotos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2149acb9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Banner.css';\r\n\r\nclass Banner extends React.Component {\r\n\r\n    msgRef = React.createRef();\r\n\r\n    componentWillUpdate() {\r\n        this.msgRef.current.classList.remove(\"invisible\"); \r\n    }\r\n\r\n    componentDidUpdate() {\r\n        setTimeout(() => {\r\n            document.querySelector(\".banner-msg\").classList.add(\"invisible\");\r\n        }, 3000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"banner-msg invisible\" ref={this.msgRef}>{this.props.msg}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Banner;","import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport Banner from './Banner';\r\nimport './UploadPhoto.css';\r\n\r\n\r\nclass UploadPhoto extends React.Component {\r\n\r\n    state = { photoBase64: \"\", hashtags: \"\"};\r\n    bannerMsg =\"\";\r\n    textInputRef = React.createRef();\r\n    imgInputRef = React.createRef();\r\n\r\n    changeHashtagsInputValue = (event) => {\r\n        const hashtags = event.target.value;\r\n        this.setState({ hashtags });\r\n    }\r\n\r\n    convertImgToBase64 = (event) => {\r\n        const img = event.target.files[0];\r\n        getBase64(img).then(data => this.setState({ photoBase64: data}));\r\n    }\r\n\r\n    checkValidation = () => {\r\n        if(this.imgInputRef.current.value===\"\"){\r\n            this.bannerMsg = \"please choose photo to upload\";\r\n        }\r\n        else if(this.textInputRef.current.value.charAt(0)!=='#'){\r\n            this.bannerMsg =\"text input must start with an hashtag\";\r\n        }\r\n        else{\r\n            this.uploadPhotoToServer();\r\n        }\r\n        this.setState(this.state);\r\n    }\r\n\r\n    uploadPhotoToServer = () => {\r\n        fetch(route(\"public/images\"), {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        }).then(res => res)\r\n          .catch(err => console.log(err));\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.bannerMsg =\"\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"upload-photo\">\r\n                <h4>Upload photo</h4>\r\n                <Form>\r\n                    <Form.Control className=\"form-element\" ref={this.imgInputRef} onChange={this.convertImgToBase64} type=\"file\"/>\r\n                    <Form.Control className=\"form-element text-input\" ref={this.textInputRef} onChange={this.changeHashtagsInputValue} value={this.state.hashtags} type=\"text\" placeholder=\"Enter hashtags..\" />\r\n                    <Button className=\"form-element\" onClick={this.checkValidation} variant=\"primary\">Submit</Button>\r\n                </Form>\r\n                <Banner msg={this.bannerMsg}></Banner>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst baseUrl = \"http://localhost:3000\";\r\n\r\nfunction route(path) {\r\n    return baseUrl + \"/\" + path;\r\n}\r\n\r\nfunction getBase64(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = error => reject(error);\r\n    });\r\n}\r\n\r\nexport default UploadPhoto;\r\n\r\n","import React from 'react';\r\nimport { Card, Container, Row, Col } from 'react-bootstrap';\r\nimport './ImageList.css';\r\n\r\nfunction ImagesList(props) {\r\n\r\n    let list = props.list.map((img, index) => {\r\n\r\n        return (\r\n            <Col className=\"col\" key={index}>\r\n                <Card className=\"card\">\r\n                    <Card.Body>\r\n                        <Card.Img className=\"card-img\" variant=\"top\" src={img.photoBase64} />\r\n                        <Card.Text className=\"card-text\">{img.hashtags.join(\"#\")}</Card.Text>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Col>\r\n        );\r\n    });\r\n\r\n    if(list.length===0 && props.DidFirstMount){\r\n        list = <h3 className=\"not-found-msg\">Did not find photo with such hashtags</h3>\r\n    }\r\n\r\n    else if (list.length % 3 !== 0) {\r\n        list.push(<Col key={list.length}></Col>);\r\n    }\r\n\r\n    return (\r\n        <Container type=\"none\">\r\n            <Row>{list}</Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ImagesList;","import React from 'react';\r\nimport ImagesList from './ImagesList';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport './SearchPhotos.css'\r\nimport Banner from './Banner';\r\n\r\n\r\nclass SearchPhotos extends React.Component {\r\n\r\n    state = { imgList: [], hashtags: \"\", DidFirstMount: false };\r\n\r\n    componentDidMount() {\r\n        fetch(route(\"public/images/?results=\" + this.props.imgNumToDisplay))\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({ imgList: res, DidFirstMount: true });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    changeHashtagsInputValue = (event) => {\r\n        const hashtags = event.target.value;\r\n        this.setState({ hashtags });\r\n    }\r\n\r\n    filterCards = () => {\r\n        const hashtagsArr = this.state.hashtags.split(\"#\");\r\n        const hashtags = hashtagsArr.join(\"-\");\r\n        fetch(route(\"public/images/byHashtags/?hashtags=\" + hashtags))\r\n            .then(res => res.json())\r\n            .then(res => this.setState({ imgList: res }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"search-photo\">\r\n                <h4>Search photos</h4>\r\n                <Form>\r\n                    <Form.Control className=\"form-element text-input\" type=\"text\" onChange={this.changeHashtagsInputValue} value={this.state.hashtags} placeholder=\"Enter hashtags...\" />\r\n                    <Button className=\"form-element\" onClick={this.filterCards}>Search</Button>\r\n                </Form>\r\n                <ImagesList DidFirstMount={this.state.DidFirstMount} list={this.state.imgList} />\r\n                <Banner></Banner>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst baseUrl = \"http://localhost:3000\";\r\n\r\nfunction route(path) {\r\n    return baseUrl + \"/\" + path;\r\n}\r\n\r\nexport default SearchPhotos;","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header(props) {\r\n\r\n    return (\r\n        <div id=\"header\">\r\n            <h1 id=\"title\">{props.title}</h1>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport UploadPhoto from './components/UploadPhoto';\r\nimport SearchPhotos from './components/SearchPhotos';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Header from './components/Header';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header title={this.props.title} />\r\n        <Router>\r\n          <div className=\"all-links\" bg=\"light\" variant=\"light\">\r\n            <Link className=\"link\" to=\"/uploadPhoto/\">Upload Photo</Link>\r\n            <Link className=\"link\" to=\"/searchPhotos/\">Search Photos</Link>\r\n          </div>\r\n          <Route path=\"/uploadPhoto/\" exact component={UploadPhoto} />\r\n          <Route path=\"/searchPhotos/\" exact component={() => <SearchPhotos imgNumToDisplay={100} />} />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst appTitle = \"Interactive Photos Album\";\r\nReactDOM.render(<App title={appTitle} />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}